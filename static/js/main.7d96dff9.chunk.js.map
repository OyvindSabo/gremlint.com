{"version":3,"sources":["router.ts","components/FadeIn.tsx","styleVariables.ts","components/NavigationButton.tsx","components/Navigator.tsx","libs/reduced-state/dispatch.ts","libs/reduced-state/reducedState.ts","store/initialState.ts","store/actions.ts","store/index.ts","store/reducers.ts","store/routines.ts","components/QueryInput.tsx","components/TextButton.tsx","components/CodePreview.tsx","libs/reduced-state/useReducedState.ts","components/Toggle.tsx","views/QueryFormatter/AdvancedOptions.tsx","views/QueryFormatter/index.tsx","components/Paragraph.tsx","components/Title.tsx","components/Spacer.ts","components/StyleGuideRule.tsx","views/StyleGuide/rules.ts","views/StyleGuide/index.tsx","components/LoadingAnimation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["router","createRouter","FadeInWrapper","styled","div","$opacity","FadeIn","children","props","useState","opacity","setOpacity","useEffect","setTimeout","textColor","inputTextColor","highlightedTextColor","white","NavigationButtonWrapper","span","NavigationButtonLink","a","$isSelected","NavigationButton","isSelected","href","label","NavigatorWrapper","NavigatorCenterContainer","Spacer","Navigator","matchedRoute","dispatch","action","payload","window","dispatchEvent","CustomEvent","detail","createReducedState","initialState","reducers","routines","state","changeListeners","Object","entries","forEach","reducer","addEventListener","event","nextState","changeListener","routine","addChangeListener","changeListenerToBeAdded","removeChangeListener","changeListenerToBeRemoved","filter","queryInput","queryOutput","shouldShowAdvancedOptions","indentation","maxLineLength","shouldPlaceDotsAfterLineBreaks","SET_QUERY_INPUT","FORMAT_QUERY","TOGGLE_SHOULD_SHOW_ADVANCED_OPTIONS","SET_INDENTATION","SET_MAX_LINE_LENGTH","SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS","store","formatQuery","unparsedIndentation","parseInt","isNaN","unparsedMaxLineLength","QueryInputWrapper","QueryInputTextArea","textarea","QueryInput","onChange","value","rows","TextButtonWrapper","TextButtonButton","button","TextButton","onClick","CodePreviewWrapper","CodePreviewBox","Code","CodeRuler","$maxLineLength","CodePreview","useReducedState","reducedState","setState","ToggleContainer","$height","$width","Option","SelectedOption","$checked","Toggle","width","height","checked","labels","unchecked","AdvancedOptionRowWrapper","AdvancedOptionLabel","AdvancedOptionInput","input","AdvancedOptions","type","min","max","target","ExpandableAdvancedOptionsWrapper","$isExpanded","QueryFormatter","ParagraphWrapper","$hasContent","css","ParagraphContent","Paragraph","Boolean","TitleWrapper","TitleContent","Title","StyleGuideRule","title","explanation","example","rules","StyleGuide","map","LoadingAnimationWrapper","GrayscaleImageWrapper","ColoredImageWrapper","$loadingCompletion","Image","img","LoadingAnimation","onLoadingComplete","loadingCompletion","setLoadingCompletion","coloredImageHasLoaded","setColoredImageHasLoaded","grayscaleImageHasLoaded","setGrayscaleImageHasLoaded","src","onLoad","ViewWrapper","App","useRouter","loadingComplete","setLoadingComplete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d96dff9.chunk.js","sourcesContent":["import createRouter from 'sharp-router';\n\nconst router = createRouter({\n  '/': 'Gremlint - Query formatter',\n  '/style-guide': 'Gremlint - Style guide',\n});\n\nexport default router;\n","import React, { HTMLAttributes, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst FadeInWrapper = styled.div<{ $opacity: number }>`\n  opacity: ${({ $opacity }) => $opacity};\n`;\n\nconst FadeIn = ({ children, ...props }: HTMLAttributes<HTMLDivElement>) => {\n  const [opacity, setOpacity] = useState(0);\n\n  useEffect(() => {\n    setTimeout(() => setOpacity(1));\n  }, []);\n\n  return (\n    <FadeInWrapper $opacity={opacity} {...props}>\n      {children}\n    </FadeInWrapper>\n  );\n};\n\nexport default FadeIn;\n","export const borderColor = 'lightgray';\nexport const textColor = 'slategray';\nexport const inputTextColor = 'darkslategray';\nexport const highlightedTextColor = 'darkslategray';\nexport const disabledTextColor = 'lightgray';\nexport const highlightColor = 'yellowgreen';\nexport const white = 'white';\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  highlightColor,\n  highlightedTextColor,\n  textColor,\n} from '../styleVariables';\n\nconst NavigationButtonWrapper = styled.span`\n  display: inline-block;\n  vertical-align: bottom;\n  padding: 10px;\n  box-sizing: border-box;\n  height: 40px;\n  width: 160px;\n`;\n\nconst NavigationButtonLink = styled.a<{ $isSelected: boolean }>`\n  text-decoration: none;\n  display: inline-block;\n  height: 20px;\n  line-height: 20px;\n  font-size: 15px;\n  color: ${({ $isSelected }) =>\n    $isSelected ? highlightedTextColor : textColor};\n  border-bottom: ${({ $isSelected }) =>\n    $isSelected ? `2px solid ${highlightColor}` : 'none'};\n  &:hover {\n    color: ${highlightedTextColor};\n  }\n`;\n\ntype NavigationButtonProps = {\n  isSelected: boolean;\n  href: string;\n  label: string;\n};\n\nconst NavigationButton = ({\n  isSelected,\n  href,\n  label,\n}: NavigationButtonProps) => (\n  <NavigationButtonWrapper>\n    <NavigationButtonLink href={href} $isSelected={isSelected}>\n      {label}\n    </NavigationButtonLink>\n  </NavigationButtonWrapper>\n);\n\nexport default NavigationButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport NavigationButton from './NavigationButton';\nimport { white } from '../styleVariables';\n\nconst NavigatorWrapper = styled.div`\n  background: ${white};\n  box-shadow: ${white} 0 0 10px;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 1;\n`;\n\nconst NavigatorCenterContainer = styled.div`\n  width: min(800px, 100vw);\n  margin-left: calc(50vw - min(400px, 50vw));\n`;\n\nconst Spacer = styled.div`\n  height: 40px;\n`;\n\ntype NavigatorProps = {\n  matchedRoute: string;\n};\n\nconst Navigator = ({ matchedRoute }: NavigatorProps) => (\n  <div>\n    <NavigatorWrapper>\n      <NavigatorCenterContainer>\n        <NavigationButton\n          isSelected={matchedRoute === '/'}\n          label=\"Query formatter\"\n          href=\"#/\"\n        />\n        <NavigationButton\n          isSelected={matchedRoute === '/style-guide'}\n          label=\"Style guide\"\n          href=\"#/style-guide\"\n        />\n      </NavigatorCenterContainer>\n    </NavigatorWrapper>\n    <Spacer />\n  </div>\n);\n\nexport default Navigator;\n","export const dispatch = (action: string, payload?: any) => {\n  window.dispatchEvent(new CustomEvent(action, { detail: payload }));\n};\n","import { ChangeListener, CreateReducedStateProps } from './types';\n\nconst createReducedState = <T>({\n  initialState,\n  reducers,\n  routines,\n}: CreateReducedStateProps<T>) => {\n  let state = initialState;\n  let changeListeners: ChangeListener<T>[] = [];\n\n  Object.entries(reducers).forEach(([action, reducer]) => {\n    window.addEventListener(action, ((event: CustomEvent) => {\n      const nextState = reducer(state, event.detail);\n      state = nextState;\n      changeListeners.forEach((changeListener) => changeListener(state));\n    }) as EventListener);\n  });\n\n  Object.entries(routines).forEach(([action, routine]) => {\n    window.addEventListener(action, ((event: CustomEvent) => {\n      routine(state, event.detail);\n    }) as EventListener);\n  });\n\n  const addChangeListener = (changeListenerToBeAdded: ChangeListener<T>) => {\n    changeListeners = [...changeListeners, changeListenerToBeAdded];\n  };\n\n  const removeChangeListener = (\n    changeListenerToBeRemoved: ChangeListener<T>,\n  ) => {\n    changeListeners = changeListeners.filter(\n      (changeListener) => changeListener !== changeListenerToBeRemoved,\n    );\n  };\n\n  return { state, addChangeListener, removeChangeListener };\n};\n\nexport default createReducedState;\n","const initialState = {\n  queryInput: '',\n  queryOutput: '',\n  shouldShowAdvancedOptions: false,\n  indentation: 0,\n  maxLineLength: 72,\n  shouldPlaceDotsAfterLineBreaks: false,\n};\n\nexport default initialState;\n","export const SET_QUERY_INPUT = 'SET_QUERY_INPUT';\nexport const FORMAT_QUERY = 'FORMAT_QUERY';\nexport const TOGGLE_SHOULD_SHOW_ADVANCED_OPTIONS =\n  'TOGGLE_SHOULD_SHOW_ADVANCED_OPTIONS';\nexport const SET_INDENTATION = 'SET_INDENTATION';\nexport const SET_MAX_LINE_LENGTH = 'SET_MAX_LINE_LENGTH';\nexport const SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS =\n  'SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS';\n","import createReducedState from '../libs/reduced-state';\nimport initialState from './initialState';\nimport reducers from './reducers';\nimport routines from './routines';\n\nconst store = createReducedState({ initialState, reducers, routines });\n\nexport default store;\n","import { formatQuery } from 'gremlint';\nimport {\n  FORMAT_QUERY,\n  SET_INDENTATION,\n  SET_MAX_LINE_LENGTH,\n  SET_QUERY_INPUT,\n  SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS,\n  TOGGLE_SHOULD_SHOW_ADVANCED_OPTIONS,\n} from './actions';\nimport { State } from './types';\n\nconst handleSetQueryInput = (state: State, queryInput: string) => ({\n  ...state,\n  queryInput,\n});\n\nconst handleFormatQuery = (state: State) => ({\n  ...state,\n  queryOutput: formatQuery(state.queryInput, {\n    indentation: state.indentation,\n    maxLineLength: state.maxLineLength,\n    shouldPlaceDotsAfterLineBreaks: state.shouldPlaceDotsAfterLineBreaks,\n  }),\n});\n\nconst handleToggleShouldShowAdvancedOptions = (state: State) => ({\n  ...state,\n  shouldShowAdvancedOptions: !state.shouldShowAdvancedOptions,\n});\n\nconst handleSetIndentation = (state: State, unparsedIndentation: string) => {\n  const indentation = parseInt(unparsedIndentation);\n  if (isNaN(indentation)) return { ...state };\n  if (indentation < 0) return { ...state, indentation: 0 };\n  const { maxLineLength } = state;\n  if (indentation > maxLineLength) {\n    return { ...state, indentation: maxLineLength };\n  }\n  return { ...state, indentation };\n};\n\nconst handleSetMaxLineLength = (state: State, unparsedMaxLineLength: string) => {\n  const maxLineLength = parseInt(unparsedMaxLineLength);\n  if (isNaN(maxLineLength)) return { ...state };\n  const { indentation } = state;\n  if (maxLineLength < indentation) {\n    return { ...state, maxLineLength: indentation };\n  }\n  return { ...state, maxLineLength };\n};\n\nconst handleSetShouldPlaceDotsAfterLineBreaks = (state: State, shouldPlaceDotsAfterLineBreaks: boolean) => ({\n  ...state,\n  shouldPlaceDotsAfterLineBreaks,\n});\n\nconst reducers = {\n  [SET_QUERY_INPUT]: handleSetQueryInput,\n  [FORMAT_QUERY]: handleFormatQuery,\n  [TOGGLE_SHOULD_SHOW_ADVANCED_OPTIONS]: handleToggleShouldShowAdvancedOptions,\n  [SET_INDENTATION]: handleSetIndentation,\n  [SET_MAX_LINE_LENGTH]: handleSetMaxLineLength,\n  [SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS]: handleSetShouldPlaceDotsAfterLineBreaks,\n};\n\nexport default reducers;\n","import { dispatch } from '../libs/reduced-state';\nimport {\n  SET_QUERY_INPUT,\n  FORMAT_QUERY,\n  SET_INDENTATION,\n  SET_MAX_LINE_LENGTH,\n  SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS,\n} from './actions';\n\nconst handleSetQueryInput = () => dispatch(FORMAT_QUERY);\nconst handleSetIndentation = () => dispatch(FORMAT_QUERY);\nconst handleSetMaxLineLength = () => dispatch(FORMAT_QUERY);\nconst handleSetShouldPlaceDotsAfterLineBreaks = () => dispatch(FORMAT_QUERY);\n\nconst routines = {\n  [SET_QUERY_INPUT]: handleSetQueryInput,\n  [SET_INDENTATION]: handleSetIndentation,\n  [SET_MAX_LINE_LENGTH]: handleSetMaxLineLength,\n  [SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS]: handleSetShouldPlaceDotsAfterLineBreaks,\n};\n\nexport default routines;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { inputTextColor } from '../styleVariables';\n\nconst QueryInputWrapper = styled.div`\n  padding: 10px;\n`;\n\nconst QueryInputTextArea = styled.textarea`\n  height: calc(100vh / 4);\n  border-radius: 5px;\n  font-family: 'Courier New', Courier, monospace;\n  background: rgba(0, 0, 0, 0.05);\n  outline: none;\n  font-size: 16px;\n  padding: 10px;\n  border: none;\n  resize: none;\n  width: 100%;\n  box-shadow: inset rgba(0, 0, 0, 0.5) 0 0 10px -5px;\n  color: ${inputTextColor};\n  box-sizing: border-box;\n`;\n\ntype QueryInputProps = {\n  onChange?: ((event: React.ChangeEvent<HTMLTextAreaElement>) => void) | undefined;\n  value: string;\n};\n\nconst QueryInput = ({ onChange, value }: QueryInputProps) => (\n  <QueryInputWrapper>\n    <QueryInputTextArea onChange={onChange} value={value} rows={25} />\n  </QueryInputWrapper>\n);\n\nexport default QueryInput;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { highlightedTextColor, textColor } from '../styleVariables';\n\nconst TextButtonWrapper = styled.span`\n  display: inline-block;\n  padding: 10px;\n  box-sizing: border-box;\n`;\n\nconst TextButtonButton = styled.button`\n  height: 20px;\n  line-height: 20px;\n  font-size: 15px;\n  color: ${textColor};\n  &: {\n    color: ${highlightedTextColor};\n  }\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  outline: none;\n`;\n\ntype TextButtonProps = {\n  label: string;\n  onClick: VoidFunction;\n};\n\nconst TextButton = ({ label, onClick }: TextButtonProps) => (\n  <TextButtonWrapper>\n    <TextButtonButton onClick={onClick}>{label}</TextButtonButton>\n  </TextButtonWrapper>\n);\n\nexport default TextButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { HTMLAttributes } from 'react';\nimport { disabledTextColor, textColor } from '../styleVariables';\n\nconst CodePreviewWrapper = styled.div`\n  padding: 10px;\n`;\n\nconst CodePreviewBox = styled.div`\n  border-radius: 5px;\n  font-family: 'Courier New', Courier, monospace;\n  background: rgba(0, 0, 0, 0.05);\n  outline: none;\n  font-size: 15px;\n  padding: 10px;\n  border: none;\n  resize: none;\n  box-shadow: inset rgba(0, 0, 0, 0.5) 0 0 10px -5px;\n  white-space: pre-wrap;\n  overflow: auto;\n  position: relative;\n`;\n\nconst Code = styled.div`\n  color: ${textColor};\n  line-height: 20px;\n  font-size: 15px;\n`;\n\nconst CodeRuler = styled.div<{ $maxLineLength: number }>`\n  top: 0;\n  left: 0;\n  width: calc(10px + ${({ $maxLineLength }) => $maxLineLength}ch);\n  border-right: 1px solid ${disabledTextColor};\n  position: absolute;\n  height: 100%;\n  pointer-events: none;\n`;\n\ntype CodePreviewProps = {\n  maxLineLength?: number;\n} & HTMLAttributes<HTMLSpanElement>;\n\nconst CodePreview = ({ maxLineLength, children }: CodePreviewProps) => (\n  <CodePreviewWrapper>\n    <CodePreviewBox>\n      <Code>{children}</Code>\n      {maxLineLength ? <CodeRuler $maxLineLength={maxLineLength} /> : null}\n    </CodePreviewBox>\n  </CodePreviewWrapper>\n);\n\nexport default CodePreview;\n","import { useEffect, useState } from 'react';\nimport { ReducedState } from './types';\n\nexport const useReducedState = <T>(reducedState: ReducedState<T>) => {\n  const [state, setState] = useState<T>(reducedState.state);\n\n  useEffect(() => {\n    const changeListener = (state: T) => {\n      setState(state);\n    };\n    reducedState.addChangeListener(changeListener);\n    return () => reducedState.removeChangeListener(changeListener);\n  }, [reducedState]);\n\n  return state;\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  borderColor,\n  highlightedTextColor,\n  textColor,\n  white,\n} from '../styleVariables';\n\nconst ToggleContainer = styled.span<{ $width: string; $height: string }>`\n  display: inline-block;\n  height: ${({ $height }) => $height};\n  width: ${({ $width }) => $width};\n  border-radius: 5px;\n  background: rgba(0, 0, 0, 0.05);\n  box-shadow: inset rgba(0, 0, 0, 0.5) 0 0 10px -5px;\n  position: relative;\n`;\n\nconst Option = styled.span<{ $width: string; $height: string }>`\n  cursor: pointer;\n  display: inline-block;\n  height: ${({ $height }) => $height};\n  width: calc(${({ $width }) => $width} / 2);\n  box-sizing: border-box;\n  padding: 10px;\n  line-height: 20px;\n  font-size: 16px;\n  color: ${textColor};\n  text-align: center;\n`;\n\nconst SelectedOption = styled.span<{ $checked: boolean }>`\n  background: ${white};\n  cursor: pointer;\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: ${({ $checked }) => ($checked ? '160px' : '0')};\n  height: 40px;\n  width: 160px;\n  border-radius: 5px;\n  box-sizing: border-box;\n  padding: 10px;\n  line-height: 20px;\n  font-size: 16px;\n  color: ${highlightedTextColor};\n  text-align: center;\n  border: 1px solid ${borderColor};\n  transition: 0.5s;\n`;\n\ntype ToggleProps = {\n  width: string;\n  height: string;\n  checked: boolean;\n  labels: { checked: string; unchecked: string };\n  onChange: (checked: boolean) => void;\n};\n\nconst Toggle = ({\n  width = '320px',\n  height = '40px',\n  checked = false,\n  labels = { checked: 'Checked', unchecked: 'Unchecked' },\n  onChange,\n}: ToggleProps) => (\n  <ToggleContainer $width={width} $height={height}>\n    <Option $width={width} $height={height} onClick={() => onChange(false)}>\n      {labels.unchecked}\n    </Option>\n    <Option $width={width} $height={height} onClick={() => onChange(true)}>\n      {labels.checked}\n    </Option>\n    <SelectedOption $checked={checked}>\n      {checked ? labels.checked : labels.unchecked}\n    </SelectedOption>\n  </ToggleContainer>\n);\n\nexport default Toggle;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { dispatch } from '../../libs/reduced-state';\nimport { useReducedState } from '../../libs/reduced-state/useReducedState';\nimport store from '../../store';\nimport {\n  SET_INDENTATION,\n  SET_MAX_LINE_LENGTH,\n  SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS,\n} from '../../store/actions';\nimport { inputTextColor, textColor } from '../../styleVariables';\nimport Toggle from '../../components/Toggle';\n\nconst AdvancedOptionRowWrapper = styled.div`\n  padding: 10px;\n`;\n\nconst AdvancedOptionLabel = styled.div`\n  height: 20px;\n  line-height: 20px;\n  font-size: 15px;\n  color: ${textColor};\n`;\n\nconst AdvancedOptionInput = styled.input`\n  border-radius: 5px;\n  background: rgba(0, 0, 0, 0.05);\n  outline: none;\n  font-size: 16px;\n  padding: 10px;\n  border: none;\n  box-shadow: inset rgba(0, 0, 0, 0.5) 0 0 10px -5px;\n  color: ${inputTextColor};\n  display: inline-block;\n  vertical-align: bottom;\n  box-sizing: border-box;\n  height: 40px;\n  width: 320px;\n`;\n\nconst AdvancedOptions = () => {\n  const state = useReducedState(store);\n  return (\n    <div>\n      <AdvancedOptionRowWrapper>\n        <AdvancedOptionLabel>Indentation</AdvancedOptionLabel>\n        <AdvancedOptionInput\n          type=\"number\"\n          min={0}\n          max={state.maxLineLength}\n          value={state.indentation}\n          onChange={({ target }) => {\n            dispatch(SET_INDENTATION, target.value);\n          }}\n        />\n      </AdvancedOptionRowWrapper>\n      <AdvancedOptionRowWrapper>\n        <AdvancedOptionLabel>Max line length</AdvancedOptionLabel>\n        <AdvancedOptionInput\n          type=\"number\"\n          min={state.indentation}\n          value={state.maxLineLength}\n          onChange={({ target }) => {\n            dispatch(SET_MAX_LINE_LENGTH, target.value);\n          }}\n        />\n      </AdvancedOptionRowWrapper>\n      <AdvancedOptionRowWrapper>\n        <AdvancedOptionLabel>Dot placement</AdvancedOptionLabel>\n        <Toggle\n          height=\"40px\"\n          width=\"320px\"\n          checked={state.shouldPlaceDotsAfterLineBreaks}\n          labels={{\n            checked: 'After line break',\n            unchecked: 'Before line break',\n          }}\n          onChange={(shouldPlaceDotsAfterLineBreaks) => {\n            dispatch(\n              SET_SHOULD_PLACE_DOTS_AFTER_LINE_BREAKS,\n              shouldPlaceDotsAfterLineBreaks,\n            );\n          }}\n        />\n      </AdvancedOptionRowWrapper>\n    </div>\n  );\n};\n\nexport default AdvancedOptions;\n","import React from 'react';\nimport styled from 'styled-components';\nimport store from '../../store';\nimport QueryInput from '../../components/QueryInput';\nimport TextButton from '../../components/TextButton';\nimport CodePreview from '../../components/CodePreview';\nimport AdvancedOptions from './AdvancedOptions';\nimport { State } from '../../store/types';\nimport { dispatch } from '../../libs/reduced-state';\nimport { useReducedState } from '../../libs/reduced-state/useReducedState';\nimport {\n  SET_QUERY_INPUT,\n  TOGGLE_SHOULD_SHOW_ADVANCED_OPTIONS,\n} from '../../store/actions';\n\nconst ExpandableAdvancedOptionsWrapper = styled.div<{ $isExpanded: boolean }>`\n  max-height: ${({ $isExpanded }) => ($isExpanded ? '240px' : '0')};\n  box-shadow: inset white 0 0 10px 0;\n  overflow: hidden;\n  transition: 0.5s;\n`;\n\nconst QueryFormatter = () => {\n  const state = useReducedState<State>(store);\n  return (\n    <div>\n      <QueryInput\n        value={state.queryInput}\n        onChange={({ target }) => dispatch(SET_QUERY_INPUT, target.value)}\n      />\n      <TextButton\n        label={\n          state.shouldShowAdvancedOptions\n            ? 'Hide advanced options'\n            : 'Show advanced options'\n        }\n        onClick={() => dispatch(TOGGLE_SHOULD_SHOW_ADVANCED_OPTIONS)}\n      />\n      <ExpandableAdvancedOptionsWrapper\n        $isExpanded={state.shouldShowAdvancedOptions}\n      >\n        <AdvancedOptions />\n      </ExpandableAdvancedOptionsWrapper>\n      {state.queryOutput ? (\n        <CodePreview maxLineLength={state.maxLineLength}>\n          {state.queryOutput}\n        </CodePreview>\n      ) : null}\n    </div>\n  );\n};\n\nexport default QueryFormatter;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { HTMLAttributes } from 'react';\nimport { textColor } from '../styleVariables';\n\nconst ParagraphWrapper = styled.div<{ $hasContent: boolean }>`\n  ${({ $hasContent }) =>\n    $hasContent &&\n    css`\n      padding: 10px;\n    `}\n`;\n\nconst ParagraphContent = styled.span`\n  color: ${textColor};\n  line-height: 20px;\n  font-size: 15px;\n`;\n\nconst Paragraph = ({ children }: HTMLAttributes<HTMLSpanElement>) => (\n  <ParagraphWrapper $hasContent={Boolean(children)}>\n    <ParagraphContent>{children}</ParagraphContent>\n  </ParagraphWrapper>\n);\n\nexport default Paragraph;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { HTMLAttributes } from 'react';\nimport { textColor } from '../styleVariables';\n\nconst TitleWrapper = styled.div<{ $hasContent: boolean }>`\n  ${({ $hasContent }) =>\n    $hasContent &&\n    css`\n      padding: 10px;\n    `}\n`;\n\nconst TitleContent = styled.div`\n  color: ${textColor};\n  line-height: 30px;\n  font-size: 25px;\n`;\n\nconst Title = ({ children }: HTMLAttributes<HTMLDivElement>) => (\n  <TitleWrapper $hasContent={Boolean(children)}>\n    <TitleContent>{children}</TitleContent>\n  </TitleWrapper>\n);\n\nexport default Title;\n","import styled from 'styled-components';\n\nconst Spacer = styled.div`\n  height: 20px;\n`;\n\nexport default Spacer;\n","import React from 'react';\nimport Paragraph from './Paragraph';\nimport Title from './Title';\nimport CodePreview from './CodePreview';\nimport Spacer from './Spacer';\n\ntype StyleGuideRuleProps = {\n  title: string;\n  explanation: string;\n  example: string;\n};\n\nconst StyleGuideRule = ({\n  title,\n  explanation,\n  example,\n}: StyleGuideRuleProps) => (\n  <div>\n    <Title>{title}</Title>\n    <Paragraph>{explanation}</Paragraph>\n    <CodePreview>{example}</CodePreview>\n    <Spacer />\n  </div>\n);\n\nexport default StyleGuideRule;\n","export const rules = [\n  {\n    title: 'Break long queries into multiple lines',\n    explanation: `What is considered too long depends on your application.\nWhen breaking the query, not all parts of the traversal have to be broken up. First, divide the query into logical groups, based on which steps belong naturally together. For instance, every set of steps which end with an as()-step often belong together, as they together form a new essential step in the query.\n    \nIf anoymous traversals are passed as arguments to another step, like a filter()-step, and it's causing the line to be too long, first split the line at the commas. Only if the traversal arguments are still too long, consider splitting them further.`,\n    example: `// Good (80 characters max width)\ng.V().hasLabel('person').where(outE(\"created\").count().is(P.gte(2))).count()\n    \n// Good (50 characters max width)\ng.V().\n  hasLabel('person').\n  where(outE(\"created\").count().is(P.gte(2))).\n  count()\n    \n// Good (30 characters max width)\ng.V().\n  hasLabel('person').\n  where(\n    outE(\"created\").\n    count().\n    is(P.gte(2))).\n  count()`,\n  },\n  {\n    title: 'Use soft tabs (spaces) for indentation',\n    explanation:\n      'This ensures that your code looks the same for anyone, regardless of their text editor settings.',\n    example: `// Bad - indented using hard tabs\ng.V().\n  hasLabel('person').as('person').\n  properties('location').as('location').\n  select('person','location').\n    by('name').\n    by(valueMap())\n    \n// Good - indented using spaces\ng.V().\n∙∙hasLabel('person').as('person').\n∙∙properties('location').as('location').\n∙∙select('person','location').\n∙∙∙∙by('name').\n∙∙∙∙by(valueMap())`,\n  },\n  {\n    title: 'Use two spaces for indentation',\n    explanation:\n      'Two spaces makes the intent of the indent clear, but does not waste too much space. Of course, more spaces are allowed when indenting from an already indented block of code.',\n    example: `// Bad - Indented using four spaces\ng.V().\n    hasLabel('person').as('person').\n    properties('location').as('location').\n    select('person','location').\n        by('name').\n        by(valueMap())\n// Good - Indented using two spaces\ng.V().\n  hasLabel('person').as('person').\n  properties('location').as('location').\n  select('person','location').\n    by('name').\n    by(valueMap())`,\n  },\n  {\n    title: 'Use indents wisely',\n    explanation: `No newline should ever have the same indent as the line starting with the traversal source g.\nUse indents when the step in the new line is a modulator of a previous line.\nUse indents when the content in the new line is an argument of a previous step.\nIf multiple anonymous traversals are passed as arguments to a function, each newline which is not the first step of the traversal should be indented to make it more clear where the distinction between each argument goes. If this is the case, but the newline would already be indented because the step in the content in the new line is the argument of a previous step, there is no need to double-indent.\nDon't be tempted to add extra indentation to vertically align a step with a step in a previous line.`,\n    example: `// Bad - No newline should have the same indent as the line starting with the traversal source g\ng.V().\ngroup().\nby().\nby(bothE().count())\n// Bad - Modulators of a step on a previous line should be indented\ng.V().\n  group().\n  by().\n  by(bothE().count())\n// Good\ng.V().\n  group().\n    by().\n    by(bothE().count())\n// Bad - You have ignored the indent rules to achieve the temporary satisfaction of vertical alignment\ng.V().local(union(identity(),\n                  bothE().count()).\n            fold())\n// Good\ng.V().\n  local(\n    union(\n      identity(),\n      bothE().count()).\n    fold())\n// Bad - When multiple anonymous traversals are passed as arguments to a function, each newline which is not the first of line of the step should be indented to make it more clear where the distinction between each argument goes.\ng.V().\n  has('person','name','marko').\n  fold().\n  coalesce(\n    unfold(),\n    addV('person').\n    property('name','marko').\n    property('age',29))\n// Good - We make it clear that the coalesce step takes two traversals as arguments\ng.V().\n  has('person','name','marko').\n  fold().\n  coalesce(\n    unfold(),\n    addV('person').\n      property('name','marko').\n      property('age',29))`,\n  },\n  {\n    title: 'Keep as()-steps at the end of each line',\n    explanation: `The end of the line is a natural place to assign a label to a step. It's okay if the as()-step is in the middle of the line if there are multiple consecutive label assignments, or if the line is so short that a newline doesn't make sense. Maybe a better way to put it is to not start a line with an as()-step, unless you're using it inside a match()-step of course.`,\n    example: `// Bad\ng.V().\n  as('a').\n  out('created').\n  as('b').\n  select('a','b')\n// Good\ng.V().as('a').\n  out('created').as('b').\n  select('a','b')\n// Good\ng.V().as('a').out('created').as('b').select('a','b')`,\n  },\n  {\n    title: 'Add linebreak after punctuation, not before',\n    explanation: `While adding the linebreak before the punctuation looks good in most cases, it introduces alignment problems when not all lines start with a punctuation. You never know if the next line should be indented relative to the punctuation of the previous line or the method of the previous line. Switching between having the punctuation at the start or the end of the line depending on whether it works in a particular case requires much brainpower (which we don't have), so it's better to be consistent. Adding the punctuation before the linebreak also means that you can know if you have reached the end of the query without reading the next line.`,\n    example: `// Bad - Looks okay, though\ng.V().has('name','marko')\n     .out('knows')\n     .has('age', gt(29))\n     .values('name')\n// Good\ng.V().\n  has('name','marko').\n  out('knows').\n  has('age', gt(29)).\n  values('name')\n// Bad - Punctuation at the start of the line makes the transition from filter to select to count too smooth\ng.V()\n  .hasLabel(\"person\")\n  .group()\n    .by(values(\"name\", \"age\").fold())\n  .unfold()\n  .filter(\n    select(values)\n    .count(local)\n    .is(gt(1)))\n// Good - Keeping punctuation at the end of each line, more clearly shows the query structure\ng.V().\n  hasLabel(\"person\").\n  group().\n    by(values(\"name\", \"age\").fold()).\n  unfold().\n  filter(\n    select(values).\n    count(local).\n    is(gt(1)))`,\n  },\n  {\n    title:\n      'Add linebreak and indentation for nested traversals which are long enough to span multiple lines',\n    explanation: '',\n    example: `// Bad - Not newlining the first argument of a function whose arguments span over multipe lines causes the arguments to not align.\ng.V().\n  hasLabel(\"person\").\n  groupCount().\n    by(values(\"age\").\n      choose(is(lt(28)),\n        constant(\"young\"),\n        choose(is(lt(30)),\n          constant(\"old\"),\n          constant(\"very old\"))))\n// Bad - We talked about this in the indentation section, didn't we?\ng.V().\n  hasLabel(\"person\").\n  groupCount().\n    by(values(\"age\").\n       choose(is(lt(28)),\n              constant(\"young\"),\n              choose(is(lt(30)),\n                     constant(\"old\"),\n                     constant(\"very old\"))))\n// Good\ng.V().\n  hasLabel(\"person\").\n  groupCount().\n    by(\n      values(\"age\").\n      choose(\n        is(lt(28)),\n        constant(\"young\"),\n        choose(\n          is(lt(30)),\n          constant(\"old\"),\n          constant(\"very old\"))))`,\n  },\n  {\n    title:\n      'Place all trailing parentheses on a single line instead of distinct lines',\n    explanation:\n      'Aligning the end parenthesis with the step to which the start parenthesis belongs might make it easier to check that the number of parentheses is correct, but looks ugly and wastes a lot of space.',\n    example: `// Bad\ng.V().\n  hasLabel(\"person\").\n  groupCount().\n    by(\n      values(\"age\").\n      choose(\n        is(lt(28)),\n        constant(\"young\"),\n        choose(\n          is(lt(30)),\n          constant(\"old\"),\n          constant(\"very old\")\n        )\n      )\n    )\n// Good\ng.V().\n  hasLabel(\"person\").\n  groupCount().\n    by(\n      values(\"age\").\n      choose(\n        is(lt(28)),\n        constant(\"young\"),\n        choose(\n          is(lt(30)),\n          constant(\"old\"),\n          constant(\"very old\"))))`,\n  },\n  {\n    title:\n      'Use // for single line comments. Place single line comments on a newline above the subject of the comment.',\n    explanation: '',\n    example: `// Bad\ng.V().\n  has('name','alice').out('bought'). // Find everything that Alice has bought\n  in('bought').dedup().values('name') // Find everyone who have bought some of the same things as Alice\n// Good\ng.V().\n  // Find everything that Alice has bought\n  has('name','alice').out('bought').\n  // Find everyone who have bought some of the same things as Alice\n  in('bought').dedup().values('name')`,\n  },\n  {\n    title: 'Use single quotes for strings',\n    explanation:\n      'Use single quotes for literal string values. If the string contains double quotes or single quotes, surround the string with the type of quote which creates the fewest escaped characters.',\n    example: `// Bad - Use single quotes where possible\ng.V().has(\"Movie\", \"name\", \"It's a wonderful life\")\n// Bad - Escaped single quotes are even worse than double quotes\ng.V().has('Movie', 'name', 'It\\\\'s a wonderful life')\n// Good\ng.V().has('Movie', 'name', \"It's a wonderful life\")`,\n  },\n  {\n    title: 'Write idiomatic Gremlin code',\n    explanation: `If there is a simpler way, do it the simpler way. Use the Gremlin methods for what they're worth.`,\n    example: `// Bad\ng.V().outE().inV()\n// Good\ng.V().out()\n// Bad\ng.V().\n  has('name', 'alice').\n  outE().hasLabel('bought').inV().\n  values('name')\n// Good\ng.V().\n  has('name','alice').\n  out('bought').\n  values('name')\n// Bad\ng.V().hasLabel('person').has('name', 'alice')\n// Good\ng.V().has('person', 'name', 'alice')`,\n  },\n];\n","import React from 'react';\nimport StyleGuideRule from '../../components/StyleGuideRule';\nimport { rules } from './rules';\n\nconst StyleGuide = () => (\n  <div>\n    {rules.map(({ title, explanation, example }) => (\n      <StyleGuideRule\n        key={title}\n        title={title}\n        explanation={explanation}\n        example={example}\n      />\n    ))}\n  </div>\n);\n\nexport default StyleGuide;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { white } from '../styleVariables';\n\nconst LoadingAnimationWrapper = styled.div`\n  position: fixed;\n  background: ${white};\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 2;\n`;\n\nconst GrayscaleImageWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  bottom: calc(50vh - 25vmin);\n`;\n\nconst ColoredImageWrapper = styled.div<{ $loadingCompletion: number }>`\n  overflow: hidden;\n  height: ${({ $loadingCompletion }) => $loadingCompletion / 2}vmin;\n  width: 100%;\n  position: absolute;\n  bottom: calc(50vh - 25vmin);\n`;\n\nconst Image = styled.img<{ $opacity: number }>`\n  opacity: ${({ $opacity }) => $opacity};\n  transition: 0.25s;\n  height: 50vmin;\n  width: 50vmin;\n  display: block;\n  margin: auto;\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0);\n`;\n\ntype LoadingAnimationProps = {\n  onLoadingComplete: VoidFunction;\n};\n\nconst LoadingAnimation = ({ onLoadingComplete }: LoadingAnimationProps) => {\n  const [loadingCompletion, setLoadingCompletion] = useState(0);\n  const [coloredImageHasLoaded, setColoredImageHasLoaded] = useState(false);\n  const [grayscaleImageHasLoaded, setGrayscaleImageHasLoaded] = useState(false);\n\n  useEffect(() => {\n    setTimeout(\n      () => {\n        if (loadingCompletion < 100) {\n          if (coloredImageHasLoaded && grayscaleImageHasLoaded) {\n            setLoadingCompletion(loadingCompletion + 1);\n          }\n        } else {\n          setTimeout(onLoadingComplete, 250);\n        }\n      },\n      loadingCompletion === 0 ? 250 : 10,\n    );\n  }, [\n    loadingCompletion,\n    coloredImageHasLoaded,\n    grayscaleImageHasLoaded,\n    onLoadingComplete,\n  ]);\n\n  return (\n    <LoadingAnimationWrapper>\n      <GrayscaleImageWrapper>\n        <Image\n          src=\"https://gremlint.com/wp-content/uploads/2020/07/Lowpoly-Gremlin-with-Text-Grayscale-1080x1080-1.png\"\n          $opacity={\n            grayscaleImageHasLoaded && loadingCompletion !== 100 ? 1 : 0\n          }\n          onLoad={() => setGrayscaleImageHasLoaded(true)}\n        />\n      </GrayscaleImageWrapper>\n      <ColoredImageWrapper $loadingCompletion={loadingCompletion}>\n        <Image\n          src=\"https://gremlint.com/wp-content/uploads/2020/07/Lowpoly-Gremlin-with-Text-1080x1080-1.png\"\n          $opacity={loadingCompletion !== 100 ? 1 : 0}\n          onLoad={() => setColoredImageHasLoaded(true)}\n        />\n      </ColoredImageWrapper>\n    </LoadingAnimationWrapper>\n  );\n};\n\nexport default LoadingAnimation;\n","import React, { useState } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport { useRouter } from 'sharp-router';\nimport router from './router';\nimport FadeIn from './components/FadeIn';\nimport Navigator from './components/Navigator';\nimport QueryFormatter from './views/QueryFormatter';\nimport StyleGuide from './views/StyleGuide';\nimport LoadingAnimation from './components/LoadingAnimation';\n\nconst ViewWrapper = styled.div`\n  width: min(800px, 100vw);\n  margin-left: calc(50vw - min(400px, 50vw));\n`;\n\nconst App = () => {\n  const { matchedRoute } = useRouter(router);\n  const [loadingComplete, setLoadingComplete] = useState(false);\n  if (!loadingComplete)\n    return (\n      <LoadingAnimation onLoadingComplete={() => setLoadingComplete(true)} />\n    );\n  return (\n    <FadeIn>\n      <div>\n        <Navigator matchedRoute={matchedRoute} />\n        <div>\n          <ViewWrapper>\n            {matchedRoute === '/' ? (\n              <QueryFormatter />\n            ) : matchedRoute === '/style-guide' ? (\n              <StyleGuide />\n            ) : null}\n          </ViewWrapper>\n        </div>\n      </div>\n    </FadeIn>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}